Array.prototype.contains = function(obj) {
    var i = this.length;
    while (i--) {
        if (this[i] == obj) {
            return true;
        }
    }
    return false;
}

function gridData() {
	var data = new Array();
	var xpos = 1; //starting xpos and ypos at 1 so the stroke will show when we make the grid below
	var ypos = 1;
	var width = 5;
	var height = 5;
	var click = 0;
	var orderId=1000;
	
	// iterate for rows	
	for (var row = 0; row < 100; row++) {
		data.push( new Array() );
		
		// iterate for cells/columns inside rows
		for (var column = 0; column < 100; column++) {
			data[row].push({
				id:orderId,
				x: xpos,
				y: ypos,
				width: width,
				height: height,
				click: click
			})
			// increment the x position. I.e. move it over by 50 (width variable)
			xpos += width;
			orderId += 1;
		}
		// reset the x position after a row is complete
		xpos = 1;
		// increment the y position for the next row. Move it down 50 (height variable)
		ypos += height;	
	}
	return data;
}

var gridData = gridData();	
// I like to log the data to the console for quick debugging
console.log(gridData);

var grid = d3.select("#grid")
	.append("svg")
	.attr("width","510px")
	.attr("height","510px");
	
var row = grid.selectAll(".row")
	.data(gridData)
	.enter().append("g")
	.attr("class", "row");
	
var column = row.selectAll(".square")
	.data(function(d) { return d; })
	.enter().append("rect")
	.attr("class","square")
	.attr("x", function(d) { return d.x; })
	.attr("y", function(d) { return d.y; })
	.attr("width", function(d) { return d.width; })
	.attr("height", function(d) { return d.height; })
	.style("fill",cellColor)
	.style("stroke", "#9e9e9e")
	.on('click', function(d) {
	   alert(d.id);	
       d.click ++;
       if ((d.click)%4 == 0 ) { d3.select(this).style("fill","#fff"); }
	   if ((d.click)%4 == 1 ) { d3.select(this).style("fill","#2C93E8"); }
	   if ((d.click)%4 == 2 ) { d3.select(this).style("fill","#F56C4E"); }
	   if ((d.click)%4 == 3 ) { d3.select(this).style("fill","#838690"); }
    });


function cellColor(d) {
	config = getConfig();
	if(config.untrackedOrders.contains(d.id)) return "#F56C4E";
	if(d.id<config.processedOrders) return "#333300";
	if(d.id<config.newOrders) return "#2C93E8";
	return "#fff";
}

function getConfig(){
	config = {};
	config.processedOrders = 8696;
	config.newOrders = 8928;
	config.untrackedOrders = [7388,7391,7459,7462,7502,7525,7645,7670,7702,7713,7728,7750,7790,7805,7845,7850,7862,7889,7916,7930,7972,7985,7992,8013,8017,8035,8048,8092,8150,8179,8183,8184,8187,8191,8198,8209,8224];
	return config;
}

